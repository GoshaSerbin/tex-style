\documentclass[14pt, a4paper]{extarticle}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage[russian]{babel}
\usepackage[spisok, boldsect, eqwhole,figwhole,hyperref,hyperprint]{fn2dipstyle}


%\documentclass[12pt, a4paper]{article}
%\usepackage[T1]{fontenc}
%\usepackage[utf8]{inputenc}
%\usepackage[russian]{babel}
%\usepackage[oglav, boldsect, eqwhole, figwhole, hyperref, hyperprint,spisok]{fn2dipstyle}

\usepackage{algorithm}
\usepackage{algorithmicx}
\usepackage{algpseudocode}
\usepackage{mathtools}

\usepackage[left=3cm,right=1cm,top=2cm,bottom=2cm]{geometry}


\usepackage{indentfirst}
\setlength{\parindent}{1.25cm}
\renewcommand{\baselinestretch}{1.5}

%\usepackage{subcaption}
%\usepackage{hyperref}
%\usepackage{amsmath}
%\usepackage{amssymb}
%\usepackage{graphicx}
%\usepackage{geometry}
%\usepackage{setspace}


\usepackage{enumitem}
\usepackage{multirow}

\pagestyle{plain}

\title{Исследование эффективности \\метода конечных элементов с частицами\\ PFEM-2 при решении некоторых задач \\ вычислительной гидродинамики}
\author{Г.\,Э.~Сербин}
\supervisor{А.\,Ю.~Попов}
\group{ФН2-81Б}
\date{2022}

\renewcommand{\vec}[1]{\bi{#1}}



\begin{document}
	
	\maketitle
	
	\section-{АННОТАЦИЯ}
	
	Расчетно-пояснительная записка $n$ с., $n$ рис., $n$ таблиц, $n$ источников.
	
	Объектом исследования является эффективность метода конечных элементов с частицами PFEM-2 (Particle Finite Element Method second generation) при решении некоторых задач вычислительной гидродинамики.
	
	Цель работы --- оценка эффективности PFEM-2 с использованием библиотеки \texttt{deal.II} (differential equation analysis library) при решении некоторых задач вычислительной гидродинамики.  Существуют множество различных способ решения задач вычислительной гидродинамики, основанных на разных подходах к описанию движения среды и имеющие свои преимущества и недостатки. Метод конечных элементов с частицами --- это гибридный эйлерово-лагранжев метод, который можно использовать для решения задач широкого класса (описан в 2013 году). Актуальность метода заключается в его способности решать задачи промышленного интереса, подразумевающие расчетные области произвольной геометрии, неструктурированные сетки и моделирование турбулентности при больших числах Рейнольдса. Возникает необходимость исследовать метод на предмет эффективности: точности, быстроты расчета и прочими характеристиками в сравнении с реализациями других алгоритмов.
	
	\newpage 
	
	\tableofcontents
	
	\newpage
	
	
	\section-{ВВЕДЕНИЕ}
	
	Созданию в технике наиболее перспективных научных открытий и разработок обычно препятствует  ограниченность достигнутого технологического уровня \cite{XXItom}. В связи с этим процесс реализации научных и технических идей завязан на поиск разумного компромисса между желаемым и возможным.
	На этапе проектирования технических устройств и систем различного назначения зачастую рассматриваются несколько возможных вариантов решений, ведущих к намеченной цели и называемыми альтернативами. 
	При этом для того чтобы учитывать возникающие противоречивые требования к научной идее, необходимо обладать достаточно полной и точной количественной информацией о параметрах, которые характеризуют возможные варианты решений.
	
	До развития ЭВМ при разработке технических устройств в большинстве отраслей приборостроения и машиностроения некоторый начальный объем необходимой информации получали из проектировочных расчетов, которые имели малую точность и обеспечивали лишь довольно грубый отбор альтернатив. На этапе эксперимента собиралась основная часть информации (более полная и точная), исходя из которой принимали окончательное решение. По мере усложнения и удорожания технических устройств, увеличения затрат на проведение эксперимента, значимость проектировочных расчетов возросла. Появился запрос на повышение достоверности расчетов для обеспечения более точного отбора альтернатив на первой стадии проектирования. Также потребовалось более точно формулировать количественные критерии для структурной и параметрической оптимизации.
	В дальнейшем проведение эксперимента для отдельных отраслей науки стало фактически невозможно, что сильно увеличило роль машинного эксперимента.
	%Развитие некоторых наукоемких отраслей современного машиностроения и приборостроения повлияли на дальнейшее усложнение разрабатываемых и эксплуатируемых технических устройств и систем, для которых зачастую проведение эксперимента стало невозможно.
	
	Увеличению значимости расчетного анализа характеристик технических систем способствовал прорыв в совершенствовании вычислительной техники, благодаря которому появились современные ЭВМ с большим объемом памяти и большим количеством операций, выполняемых за секунду. Таким образом, возник фундамент для ускоренного развития математического моделирования и использования вычислительного эксперимента как в качестве расчетно-теоретического сопровождения на стадии отработки технического устройства, так и при его проектировании, оптимизации его режимов работы, анализе его надежности и прогнозировании отказов и аварийных ситуаций, а также при усовершенствовании технического устройства.
	
	Машинный эксперимент со временем утвердился как метод исследования математической модели \cite{Moiseev}. Математическое моделирование и вычислительный эксперимент открывает возможность для существенного повышения эффективности инженерных разработок в том числе при создании принципиально новых, не имеющих прототипов машин и приборов, материалов и технологий, что способствует уменьшению затрат времени и средств на использование в технике передовых достижений физики, химии, механики и других фундаментальных наук. 
	
	Вычислительная гидродинамика --- подраздел механики сплошных сред, включающий совокупность физических, математических и численных методов, предназначенных для вычисления характеристик потоковых процессов.
	
	Движение вязкой несжимаемой жидкости описывается уравнениями Навье --- Стокса и уравнением неразрывности. Подходы к решению уравнения Навье --- Стокса для несжимаемой среды могут быть разделены на два класса в зависимости от метода описания движения частиц, называемые эйлеровым и лагранжевым. В первом случае ускорение описывается как сумма частной производной скорости по времени и конвективного слагаемого. Во втором подходе ускорение описывается полной производной скорости по времени.
	
	При описании методов решения уравнения Навье --- Стокса важно также учитывать уровень локальности необходимой для расчета информации \cite{PFEM2013}. В <<неявных>> методах изменение решения в какой-либо части области способно повлиять на решение в любой другой ее части. В <<явных>> методах решение в точке внутри временного шага может повлиять только на часть области вблизи этой точки. <<Неявные>> методы, как правило, более робастны, но менее эффективны. Это связано прежде всего со сложностью расчетов и обработки информации, необходимой для обновления решения. Помимо этого, <<явные>> методы имеют преимущество при учете развития технологий параллельных вычислений.
	%Также несмотря на то, что "неявные" схемы предпочтительней в литературе, "явные" находятся в лучшем положении, учитывая современные технологии параллельных вычислений. \cite{PFEM2013}
	
	Методы, основанные на движении частиц, постоянно использовались с тех пор как Джозеф Монаган предложил первые идеи этого подхода для решения астрофизических задач методом, называемым гидродинамикой сглаженных частиц SPH (Smoothed Particle Hydrodynamics). Этот метод был позже обобщен для решения задач гидромеханики. Метод SPH принадлежит семейству бессеточных методов.
	
	Метод конечных элементов с частицами PFEM (Particle Finite Element Method) совмещает идеи частиц с методом конечных элементов с вспомогательной сеткой конечных элементов. PFEM был успешно использован для решения уравнений Навье --- Стокса в случае свободных поверхностей. Идея совмещения сеток с движущимися частицами также использована в методе материальной точки MPM (Material Point Method), однако основное их отличие в том что в PFEM частицы не имеют массу и являются материальными точками. Это позволяет использовать различное число частиц, что упрощает построение сетки, т.к. имеется возможность делать ее более грубой \cite{PFEM2014}.
	
	Одной из причин, почему лагранжевы методы, в частности PFEM, не применяются напрямую в решении однородных потоков состоит в большой вычислительной сложности.
	%, включая меш, грид, или нейберхуд менеджмент.
	 Это и особенности явных схем сделали эффективность оригинального PFEM серьезной проблемой.
	Метод развился благодаря прогрессу, достигнутому в параллельном создании сеток, что в некоторой степени избавило от этого серьезного ограничения.
	
	Несмотря на указанные ограничения, лагранжев подход имеет ряд преимуществ по сравнению с эйлеровым. Например, отсутствие конвективного слагаемого в уравнении делает несимметричную систему уравнений симметричной и положительно определенной. Также для течения с преобладанием переноса среды, временной шаг в эйлеровом подходе должен быть уменьшен для сохранения устойчивости. В то же время лагражев подход не имеет этого недостатка, в случае если уравнение интегрируются с хорошей точностью. Это ключевой момент, на котором был сделан акцент при разработке нового поколения метода PFEM.
		
	Метод конечных элементов с частицами PFEM-2 (Particle Finite Element Method second generation) --- это гибридный эйлерово-лагранжев метод, позволяющий решать широкий класс задач. Метод применяется в том числе для моделирования течений несжимаемых сред, что представляет интерес для инженерной практики.
	Актуальность метода также заключается в его способности решать задачи, представляющие промышленный интерес, в которых обычно используются расчетные области произвольной геометрии, неструктурированные сетки и моделирование турбулентности при больших числах Рейнольдса или требуется вычисление гидродинамических сил над твердыми телами. Наконец, PFEM-2 предназначен для того, чтобы стать достойной альтернативой для тех инженеров-конструкторов, которые в настоящее время используют классическое программное обеспечение для вычислительной гидродинамики \cite{PFEM2013}.
	
	
	 Реализация с использованием свободно распространяемой библиотеки \texttt{deal.II}\\ (differential equation analysis library) метода конечных элементов с частицами PFEM-2 имеется на кафедре <<Прикладная математика>> МГТУ им.Н.Э.~Баумана. При разработке новых численных методов, пока еще не распространенных в прикладных пакетах, а также при создании их программных реализаций, очень важна верификация численных методов и проверка на задачах с известным решением либо известными числовыми характеристиками. Представляет интерес исследование времени расчета и его точности. Реализация позволяет решать и трудоемкие трехмерные задачи.
		
	Практическая применимость метода зависит от эффективности реализации. Даже хорошая алгоритмическая идея может быть испорчена неоптимальной программной реализацией. В настоящее время эффективная реализация подразумевает широкое использование технологий параллельных вычислений.
	Чтобы оценить эффективность метода при решении трудоемких задач необходимо использовать технологии параллельных вычислений. Основным недостатком PFEM-2 является необходимость большого объема памяти, что ограничивает его применение на одном компьютере, что подталкивает на работу в системе с распределенной памятью \cite{PFEM2014}. В отличие от систем с общей памятью в ней отсутствует гонка данных, но приходится работать с разумным распределением данных по процессам.
	
	Целью дипломной работы является оценка эффективности метода конечных элементов с частицами PFEM-2 с использованием библиотеки deal.II при решении некоторых задач вычислительной гидродинамики.
	Для достижения поставленной цели были поставлены следующие задачи:
	\begin{enumerate}[label=\arabic*)]
		\item доработать реализацию PFEM-2 для повышения ее быстродействия;
		\item выполнить вычислительные эксперименты, сравнить эффективность реализации PFEM-2 (с использованием  программной библиотеки \texttt{deal.II}) и пакета \texttt{OpenFOAM} (Open Source Field Operation And Manipulation) для разных параметров на примерах обтекания кругового цилиндра и обтекания профиля крыла;	
		\item сравнить эффективность распараллеливания реализаций.
	\end{enumerate}

%	Целью преддипломной практики является расширение, закрепление и систематизация теоретических знаний по дисциплинам направления 01.03.04 <<Прикладная математика>>, приобретение опыта самостоятельной профессиональной деятельности в области прикладной математики; подготовка информационной и опытной базы для написания выпускной квалификационной работы. Задачами  преддипломной практики являются:
%	\begin{enumerate}[label=\arabic*)]
%		\item выработка устойчивых навыков проведения научно-исследовательской работы;
%		\item повышение качества усвоения и закрепление изучаемых дисциплин;
%		\item овладение навыками применения теоретических знаний и современных методов научных исследований в профессиональной деятельности.
%	\end{enumerate}
	
	\newpage
	%открытой платформе для численного моделирования задач механики сплошных сред
	\section{Метод конечных элементов с частицами PFEM-2}
	\subsection{Основные уравнения}
	
	Течение вязкой несжимаемой жидкости описывается уравнениями Навье --- Стокса и несжимаемости \cite{mss}
\begin{equation}
	\label{refNavie}
	\left\{
	\begin{array}{rcl}
		\rho\biggl(\dfrac{\partial \vec{u}}{\partial t}&+&\left(\vec{u} \cdot \nabla\right) \vec{u}\biggr)=-\nabla p + \mu \Delta \vec{u}+\rho \vec{g},\\
		\nabla \cdot \vec{u} &=& 0,
	\end{array}
	\right.
\end{equation}
	где $\vec{u}(\vec{r},\,t)$ --- векторное поле скоростей жидкости, м/c;
	
	$p(\vec{r},\,t)$ --- поле давления, Па;
	
	$\rho$ --- плотность жидкости, кг$/$м$^3$;
	
	$\mu$ --- коэффициент динамической вязкости, Па$\cdot$с;
	
	$\nu=\sfrac{\mu}{\rho}$ --- коэффициент кинематической вязкости, м$^2/$с;
	
	$\vec{g}(\vec{r},\,t)$ --- векторное поле массовых сил, м$/$с$^2$;
	
	Граничные условия для системы могут иметь следующий вид:
	\begin{enumerate}[label=\arabic*)]
		\item граничные условия первого рода, в которых задаются значения скорости и давления 
		\[
		\left.\vec{u}\right|_{\Gamma_1}=\vec{u_0},\quad \left. p\right|_{\Gamma_2}=p_0;
		\]
		
		\item граничные условия второго рода, в которых задается нормальная производная
		\[
		\left.\dfrac{\partial\vec{u}}{\partial \vec{n}}\right|_{\Gamma_3}=\text{\textbf{const}},\quad
		\left.\dfrac{\partial p}{\partial \vec{n}}\right|_{\Gamma_4}=\text{const},
		\]
		где $n$ --- вектор нормали к границе области течения.
	\end{enumerate}
	
	Использование лагранжевых методов позволяет учитывать конвективное слагаемое в уравнении с помощью
	моделирования движения частиц по расчетной области.
	Полная производная записывается в виде
	\begin{equation*}
		\frac{d}{dt}=\frac{\partial}{\partial t}+\vec{u} \cdot \nabla.
	\end{equation*}
	Тогда первое уравнение системы $\eqref{refNavie}$ примет вид
	\begin{equation*}
		\rho\frac{d\vec{u}}{dt}=-\nabla p + \mu \Delta \vec{u}+\rho \vec{g},\\
	\end{equation*}
	Заменяя производную $\sfrac{d\vec{u}}{dt}$ разностным аналогом получаем систему
	\begin{equation}
		\label{refRasnChema23}
		\left\{
		\begin{array}{rcl}
			\rho\dfrac{ \vec{u}^{m+1}}{\Delta t}&=&\rho \dfrac{\vec{u}^m}{\Delta t} -\nabla p^{m+1} + \mu \Delta \vec{u}^{m+\theta}+\vec{g}^{m+1},\\
			\nabla \cdot \vec{u}^{m+1} &=& 0,
		\end{array}
		\right.
	\end{equation}
	где $\theta$ определяет способ учета слагаемого $\Delta \vec{u}$: $\theta = 0$ соответствует
	явному учету слагаемого, а $\theta = 1$ --- неявному.
	
	\subsection{Основная идея метода}
	Основная идея метода PFEM-2 заключается в разделении задачи по
	физическим процессам: при помощи переноса лагранжевых частиц учитывается конвективное слагаемое $(\vec{u} \cdot \nabla) \vec{u}$, а с помощью метода конечных элементов --- диффузионный член $\Delta \vec{u}$, градиент давления $\nabla p$ и массовые силы $\vec{g}$.
	
	Кратко опишем основные этапы алгоритма метода конечных элементов с частицами. На начальном этапе
	происходит построение сетки для расчетной области, подготавливаются данные для конечно-элементной задачи (матрицы жесткости, векторы правых частей, граничные условия и т.п.) и задается начальное размещение частиц.
	Далее на каждом шаге по времени выполняются 4 основных этапа метода:
	\begin{enumerate}[label=\arabic*)]
		
		\item перемещение частиц вдоль линий тока в новые положения --- на каждом шаге определяется, в какой ячейке находится частица, вычисляется скорость и производится ее перемещение. При этом скорости, которые
		«хранятся» в частицах, в процессе переноса не используются;
		
		\item восстановление поля скоростей в каждом узле путем учета вклада от
		всех частиц, находящихся в ячейках, содержащих этот узел;
		
		\item решение гидродинамической задачи методом конечных элементов без
		учета конвективного слагаемого;
		
		\item коррекция скоростей частиц путем интерполяции с узлов изменения скорости.
		
	\end{enumerate}

\subsection{Работа с частицами}
\textbf{Перемещение частиц}

Положение частицы $p$ в момент времени $t_{m+1}$ можно получить путем интегрирования движения частицы вдоль
линии тока, используя известное поле скоростей $\vec{v}^m$.
по следующей формуле

\[
\vec{x}_p^{m+1}\approx \vec{x}_p^m+\int_{t_m}^{t_{m+1}} \vec{v}^m (\vec{x}_p) dt,
\]
где $\vec{x}_p$ --- положение частицы $p$, $\vec{v}^m$ --- известное поле скоростей в момент времени $t_m$.
На первом шаге оно известно из начальных данных, а на следующих --- из решения задачи методом конечных элементов. Для определения положения частиц промежуток $[t_m,\,t_{m+1}]$ разбивается на $K$ внутренних шагов
\[
t_m^k=t_m+k\tau,\quad k=0,\,1,\,\ldots,K-1,\qquad \tau=\frac{t_{m+1}-t_m}{K}.
\]

Расчетная схема примет вид
\[
\vec{x}_p^{k+1} = \vec{x}_p^k+\tau \vec{v}^m (\vec{x}_p^k),\quad k=0,\,1,\,\ldots,K-1.
\]
Скорости, хранящиеся в частицах, во время данного этапа не используются. Движение происходит по <<замороженному>> полю скоростей $\vec{v}^m$.
\bigskip

\textbf{Проецирование поле скоростей с частиц в узлы сетки}

После перемещения частиц в их новые положения поле скоростей в каждом узле обнуляется и вычисляется заново путем учета вклада от всех частиц, находящихся в ячейках, содержащих этот узел. Делать это можно различными методами, например, методом проецирования с помощью функций форм, методом наименьших квадратов, методом оценок с помощью ядер Гингольда --- Монагана. В имеющейся реализации проецирование выполняется c помощью функций формы
\begin{equation}
	\label{projection}
\vec{v}^j=\frac{\sum_{i=1}^k \vec{v}_i\phi^j(\vec{x}_i)}{\sum_{i=1}^k \phi^j(\vec{x}_i)},
\end{equation}
где $\vec{v}^j$ --- обновленное поле скоростей в $j$-м узле, $\phi^j$ --- функция формы элемента, а суммирование идет по всем частицам, вносящим вклад в значение скорости в узле.

\subsection{Шаг МКЭ}
Будем рассматривать задачу в двумерной постановке и считать что массовые силы отсутствуют, тогда в системе $\eqref{refRasnChema23}$
%\begin{equation}
%\label{refRasnChema}
%\left\{
%\begin{array}{rcl}
%\rho\dfrac{ \vec{u}^{m+1}}{\Delta t}&=&\rho \dfrac{\vec{u}^m}{\Delta t} -\nabla p^{m+1} + \mu \Delta \vec{u}^{m+\theta},\\
%\nabla \cdot \vec{u}^{m+1} &=& 0,
%\end{array}
%\right.
%\end{equation}
%где
\begin{equation*}
	\vec{u}=
	\begin{pmatrix}
		u\\
		v 
	\end{pmatrix},\quad
	\vec{g}=\begin{pmatrix}
		0\\
		0
	\end{pmatrix}, \quad
	\vec{r}=\begin{pmatrix}
		x\\
		y
	\end{pmatrix}.
\end{equation*}
С использованием девиатора тензора вязких напряжений $\hat{\tau}$ 
схема запишется в виде
\begin{equation}
	\label{refRasnChema2}
	\left\{
	\begin{array}{rcl}
		\rho\dfrac{ \vec{u}^{m+1}}{\Delta t}&=&\rho \dfrac{\vec{u}^m}{\Delta t} -\nabla p^{m+1} + \nabla \cdot \hat{\tau}^{m+\theta},\\
		\nabla \cdot \vec{u}^{m+1} &=& 0,
	\end{array}
	\right.
\end{equation}
где
\[
\tau_{ij}=2\mu\left( \dot{\varepsilon}_{ij}-\delta_{ij}\frac{\dot{\varepsilon}_{kk}}{3}\right),\quad i,\,j=1,\,2,
\]
и $\dot{\varepsilon}_{ij}$ --- компоненты тензора скоростей деформации
\[
\dot{\varepsilon}_{ij}=\frac{1}{2}\left(\frac{\partial u_i}{\partial x_j}+\frac{\partial u_j}{\partial x_i} \right).
\]
Можно выделить три основных этапа решения системы $\eqref{refRasnChema2}$ при использовании подхода с расщеплением:

\begin{enumerate}[label=\arabic*)]
	\item записывается и решается уравнение для определения вектора прогноза
	скорости, для которого не требуется выполнение уравнения несжимаемости;
	
	\item с учетом найденного вектора прогноза скорости, решается уравнение
	для определения скалярной функции давления;
	
	\item с использованием найденного давления корректируется вектор скорости, для которого уже обеспечивается выполнение условия несжимаемости.
	
\end{enumerate}

Введем вектор прогнозной скорости $\vec{u}^*$ и преобразуем аппроксимацию производной по времени
следующим образом:
\[
\frac{\vec{u}^{m+1}-\vec{u}^m}{\Delta t}=\frac{\vec{u}^{m+1}-\vec{u}^*}{\Delta t}+\frac{\vec{u}^{*}-\vec{u}^m}{\Delta t}.
\]
Тогда первое уравнение системы $\eqref{refRasnChema2}$ будет иметь вид
\[
\rho \frac{\vec{u}^{m+1}-\vec{u}^*}{\Delta t}+\rho \frac{\vec{u}^{*}-\vec{u}^m}{\Delta t}=-\nabla p^{m+1} + \nabla \cdot \hat{\tau}^{m+\theta}.
\]
Уравнение разбивается на два уравнения
\begin{gather}
	\label{refParametrh3}
	\rho \frac{\vec{u}^{*}}{\Delta t}=\rho \frac{\vec{u}^m}{\Delta t}+ \nabla \cdot \hat{\tau}^{m+\theta},\\
	\label{refParametreps}
	\rho \frac{\vec{u}^{m+1}}{\Delta t}=\rho \frac{\vec{u}^*}{\Delta t}-\nabla p^{m+1}.
\end{gather}

Таким образом, подход с расщеплением предполагает

\begin{enumerate}[label=\arabic*)]
	
	\item определить вектор прогноза скорости $\vec{u}^*$ из уравнения $\eqref{refParametrh3}$

\item чтобы получить уравнение для определения давления, необходимо применить к $\eqref{refParametreps}$ операцию дивергенции и, с учетом уравнения несжимаемости, получить уравнение Пуассона
\begin{equation}
	\label{refLaplas}
	\Delta p^{m+1}= \frac{\rho}{\Delta t} \nabla \cdot \vec{u}^{*}
\end{equation}

\item для того чтобы получить вектор коррекции скорости, необходимо полученное давление подставить в $\eqref{refParametreps}$.
\end{enumerate}

Недостатком данной схемы является тот факт, что на первом шаге прогноз скорости не учитывает градиент давления, что влияет на корректность
задания граничных условий.

Перейдем к пространственной дискретизации.
В работе будут рассматриваться четырехугольные конечные элементы 1-го порядка с линейными функциями формы.
Введем обозначения
\[
\vec{N}_u^i=\vec{N}_u^i(x,y),\quad \vec{N}_p^i=\vec{N}_p^i(x,y).
\]
При этом на каждом элементе функции представляются в виде
\begin{equation}
\label{refParametrh4}
u_k=\vec{N}_u \cdot \vec{\widetilde{u}}_k,\quad p=\vec{N}_p \cdot \vec{\widetilde{p}},
\end{equation}
где
\[
\vec{N}=\begin{pmatrix}
N^1\\
N^2\\
N^3\\
N^4
\end{pmatrix},\quad
\vec{\widetilde{u}}_k=\begin{pmatrix}
u_k^1\\
u_k^2\\
u_k^3\\
u_k^4\\
\end{pmatrix}, \quad
\vec{\widetilde{p}}=\begin{pmatrix}
p^1\\
p^2\\
p^3\\
p^4\\
\end{pmatrix},
\]
т.е. $\vec{\widetilde{u}}_k$ и $\vec{\widetilde{p}}$ --- векторы узловых значений.
	
	\textbf{Коррекция поля скоростей в частицах}
	
	На последнем этапе метода необходимо обновить скорости в
	частицах. Скорость каждой частицы изменяется на величину изменения скоростей в узлах содержащей ее ячейки по сравнению с предыдущим
	шагом
	\[
	\delta \vec{v}_p^{m+1}=\sum_{i=1}^4 \left(\vec{u}^{m+1}_i-\vec{u}^m_i\right)N_i(\vec{r}_p),
	\]
	
	\subsection{Общий алгоритм и программная реализация}
	
	Общий алгоритм решение задачи гидродинамики методом конечных элементов с частицами PFEM-2 выглядит следующим образом:
	
	\begin{enumerate}[label=\arabic*)]
		\item подготовка сетки конечных элементов;
		
		\item задание размера и шаблона матриц жесткости, размера векторов правых частей;
		
		\item засеивание частиц;
		
		\item цикл по времени содержит шаги:
		\begin{enumerate} 
			\item конвективное перемещение частиц вдоль поля скоростей;
			
			\item переупорядочивание частиц, удаляются или добавляются для обеспечения равномерности размещения;
			
			\item проецирование скоростей с частиц на узлы сетки;
			
			\item последовательное нахождение поля прогноза скорости, давления и коррекции скорости с помощью метода конечных элементов;
			
			\item коррекция скоростей в частицах на основе полученного решения;
			
			\item вывод результатов.
			\end{enumerate}
		
	\end{enumerate}
	
	
	
	
	Библиотека \texttt{deal.II} \cite{dealii} (differential equations analysis library --- библиотека анализа дифференциальных уравнений) --- программная библиотека \texttt{C++}, предназначенная для численного решения уравнений в частных производных с использованием метода конечных элементов. Данная библиотека предоставляет возможность быстрой разработки кода с использованием широкого набора классов. Библиотека \texttt{deal.II}  берет на себя детали в обработке и уточнении сетки, обработке степеней свободы, выводе результатов и т.п. Также имеется поддержка сразу нескольких пространственных измерений, при которой программа может быть написана независимо от пространственного измерения. Преимуществами библиотеки также является свободное распространение, открытый исходный код и обширная документация, представленная в виде логической древовидной структуры, что обеспечивает быстрый доступ к необходимой информации.
	
	Реализацией лагранжевых функций форм в библиотеке \texttt{deal.II} является класс \texttt{FE\_Q<dim>},
	где \texttt{dim} --- размерность пространства. Функции формы первого порядка для двумерной задачи задаются следующим образом \texttt{FE\_Q<2> feP}.
	
	Объект \texttt{dof\_handler} класса \texttt{DoFHandler} несет в себе информацию о нумерации степеней свободы (для функций формы первого порядка --- нумерацию вершин сетки). Метод \texttt{distribute\_dofs(feP)} этого объекта производит данную нумерацию на основе вида конечного элемента \texttt{feP}, а метод \texttt{n\_dofs()} возвращает количество степеней свободы для задачи.
	
	\texttt{deal.II} содержит полностью самостоятельную библиотеку линейной алгебры, включающую разреженные матрицы и векторы, поддержку блочных систем и интерфейса с другими пакетами, например \texttt{Trilinos}.
	
	Для решения получаемой системы линейных алгебраических выражений используется решатель \texttt{SolverGMRES} из библиотеки \texttt{Trilinos}. Он реализует обобщенный метод минимальной невязки (Generalized Minimal Residual Method) --- итерационный метод, основанный на минимизации функционала невязки. Критерием остановки является норма этой невязки. 
	В качестве предобуславливателя для поля давления используется объект \texttt{PreconditionAMG} (Algedraetic Multigrid). Предобуславливатель работает как черный ящик, хорошо работает на многих системах линейных алгебраических уравнений, получающихся из уравнений в частных производных, в том числе уравнений Навье --- Стокса для несжимаемой жидкости. Для поля скоростей используется \texttt{PreconditionJacobi}, реализующий предобуславливатель Якоби.
	
	
	
	
	% что еще из реализации, можно картинки
	
	
	\subsection{Распараллеливание}
	
	%Поддается распараллеливанию часть. описать взять из статьи
	Для расчета в параллельном режиме используется технология передачи информации MPI (Message Passing Interface). Для выполнения параллельных вычислений несколькими потоками необходима декомпозиция области, в связи с чем используется библиотека \texttt{p4est}, совместимая с \texttt{deal.II}. Данная библиотека выполняет разбиение сетки и ее хранение в виде иерархии деревьев. Каждый процесс имеет свою часть сетки, а также один ряд ячеек соседнего процесса, называемых ghost cells. После декомпозиции сетки, на каждом шаге МКЭ происходит сборка матрицы системы и вектора правой части для всех неизвестных полей. Каждый вычислительный узел обрабатывает  только свои ячейки. По завершении сборки происходит обмен данными между процессами. Для работы с векторами и разреженными матрицами на этапе метода конечных элементов используется библиотека \texttt{Trilinos}, которая предоставляет возможность задействовать технологии MPI \cite{trilinos}.
	
	\textbf{Перемещение частиц.} Частицы перемещаются независимо друг от друга по известному полю скоростей, поэтому имеется возможность выполнять перемещение всеми вычислительными узлами независимо. Обмен данных требуется только в процедуре переупорядочивания частиц.
	
	 Переупорядочивание частиц состоит их трех этапов. На первом этапе проверяется осталась ли частица в той ячейке, в которой находилась до перемещения. Если это так, то дополнительных действий не требуется. Иначе проверяются соседние ячейки по отношению к проверенной. При нахождении частицы в одной из этих ячеек возможны два случая: частица перешла в ячейку своего процесса или --- в ghost ячейку. В последнем случае информация о ней будет передана на следующем этапе процессу, которому теперь стала принадлежать частица. Если частица не была найдена в соседних ячейках, то она удаляется. Это должно происходить по причине того что частица вышла за пределы области расчета. Пролет частицы через слой соседних ячеек предполагается маловероятным, поскольку имеется возможность менять шаг по времени. На втором этапе происходит обмен данными между процессами. Каждая частица, имеющая свои локальные и глобальные координаты, помещается в соответствующую ячейку нового процесса. На последнем этапе проверяется количество частиц в каждой ячейке. При необходимости происходит добавление частиц (если в ячейке их не оказалось) или удаление (если превышен соответствующий лимит).
	
	\textbf{Проецирование скоростей частиц.} Для узлов, находящихся на границе раздела подобластей, необходим обмен данными, чтобы в проецировании на такие узлы участвовали все частиц, находящиеся рядом. Для узлов внутри подобластей обмена данными не требуется
	
	\textbf{Коррекция скоростей частиц.} Коррекция для каждой частицы происходит с учетом нового поля скоростей независимо от остальных частиц. Обмен данными не требуется.
	
	\section{Тестовые задачи}
	
	\subsection{Обтекание кругового цилиндра}
	
	
	Рассмотрим тестовую двумерную задачу об обтекании в канале неподвижного цилиндрического профиля вязкой несжимаемой жидкостью. В качестве области течения $\Omega$ возьмем прямоугольник $[0,\,L_1]\times[0,\,L_2]$ (cм. рис. $\ref{piccylinder}$). Примем $L_1=2.2$ м, $L_2=0.41$ м. Диаметр основания цилиндра $D=0.1$ м. На границе профиля, а также на верхней и нижней стенке канала зададим условие прилипания $\vec{v}=0$ м/с . На входе в канал зададим граничное условие c параболическим распределением скорости и максимальным значением $v_{\max} = 1.5$ м/с в центре канала.
	
	Для давления задаем значение $p=p_0=0$ Па на выходе из канала. Плотность жидкости $\rho = 1$ кг/м$^3$, коэффициент динамической вязкости $\mu = 0.001$ Па $\cdot$ с. Для такой постановки число Рейнольдса 
	\[	
	\text{Re}=\frac{V D}{\nu} =\frac{1 \cdot 0.1}{0.001}=100.
	\]
	
	%Для области будем использовать следующую равномерную сетку.
	
	\begin{figure}[!h]
		\centering
		\includegraphics[scale =0.45]{cylinder 3.png}
		\caption{Расчетная область для тестовой задачи об обтекании кругового профиля}
		\label{piccylinder}
	\end{figure}
	
	\subsection{Обтекание профиля крыла}
	
	
	Рассмотрим тестовую двумерную задачу об обтекании профиля крыла NACA-0012 вязкой несжимаемой жидкостью с углом атаки $\alpha= 4^\text{o} $. В качестве области течения $\Omega$ возьмем прямоугольник $[0,\,L_1]\times[0,\,L_2]$. Примем $L_1=13$ м, $L_2=10$ м. Длина крыла $D=1$ м, $L=2.5$ м (cм. рис. $\ref{picnaca}$). Скорость набегающего потока $V_{\infty} = 10$  м/с. На границе профиля зададим условие прилипания $\vec{v}=0$ м/с. Плотность жидкости $\rho = 1$ кг/м$^3$, коэффициент динамической вязкости $\mu = 0.001$ Па $\cdot$ с. 
	
	Для такой постановки число Рейнольдса 
	\[	
	\text{Re}=\frac{V_{\infty} D}{\nu} =\frac{10 \cdot 1}{0.001}=10000.
	\]
	
		\begin{figure}[!h]
		\centering
		\includegraphics[scale =0.45]{naca 4.png}
		\caption{Расчетная область задачи об обтекании профиля крыла NACA-0012}
		\label{picnaca}
	\end{figure}
	
	\section{Доработка решения конечноэлементной задачи}
	
	\subsection{Вынесение сборки матриц}
	
	%почему это возможно
	
	\textbf{Ранее реализованный подход к сборке} состоит из этапов (на примере давления):
	\begin{enumerate}[label=\arabic*)]
		\item подготовка матриц и векторов правых частей. Задаются шаблоны матриц:
		
		{\ttfamily
			 \, dof\_handlerP.distribute\_dofs (feP);
			
			 \, DynamicSparsityPattern dspP(dof\_handlerP.n\_dofs());
			
			 \, DoFTools::make\_sparsity\_pattern (dof\_handlerP, dspP);
			
			 \, sparsity\_patternP.copy\_from(dspP);
		}
		
		размеры матриц, векторов правых частей и решений:
		
		{\ttfamily
			 \, system\_mP.reinit (sparsity\_patternP);
			
			 \, solutionP.reinit (dof\_handlerP.n\_dofs());
			
			 \, old\_solutionP.reinit (dof\_handlerP.n\_dofs());
			
			 \, system\_rP.reinit (dof\_handlerP.n\_dofs());
		}
	
		здесь \texttt{solutionP}, \texttt{old\_solutionP} --- векторы решений на новой и старом слоях по времени;

		\item на каждом шаге по времени цикл сборки локальных матриц и векторов правых частей и добавление локальных матриц и векторов в глобальные:
		
		{\ttfamily
		 \, cell->get\_dof\_indices (local\_dof\_indicesP);
		
		 \, for (unsigned int i=0; i<dofs\_per\_cellP; ++i)
		
		 \, \qquad for (unsigned int j=0; j<dofs\_per\_cellP; ++j)
		\vspace{-4mm}
		\begin{multline*}
		\qquad \qquad \text{system\_mP.add (local\_dof\_indicesP[i],}\\ \text{local\_dof\_indicesP[j], local\_matrixP(i,j));}
		\end{multline*}			
		 \, for (unsigned int i=0; i<dofs\_per\_cellP; ++i)

		 \, \qquad system\_rP(local\_dof\_indicesP[i]) += local\_rhsP(i);
		}
	
		\item применение граничных условий:
		
		{\ttfamily		
		\, std::map<types::global\_dof\_index,double> boundary\_valuesP;
		\vspace{-4mm}	
		\begin{multline*}
		\text{VectorTools::interpolate\_boundary\_values(dof\_handlerP,}\\ \text{4,ConstantFunction<2>(0.0),boundary\_valuesP);}
		\end{multline*}	
	\vspace{-19mm}
		\begin{multline*}
		\text{MatrixTools::apply\_boundary\_values(boundary\_valuesP,}\\ \text{system\_mP,solutionP,system\_rP);}
		\end{multline*}	
		}	
		\item решение системы линейных алгебраических уравнений:
		
		{\ttfamily	
		\, SolverControl solver\_control(10000, 1e-13);
		
		\, SolverBicgstab<> solver(solver\_control);
		
		\, PreconditionSSOR<> preconditioner;
				
		\, preconditioner.initialize(system\_mP, 1.0);
		
		\, solver.solve(system\_mP,solutionP,system\_rP,preconditioner);
	}
	\end{enumerate}

		Существенно то, что функция \texttt{apply\_boundary\_values} изменяет матрицу жесткости \texttt{system\_mP}. В соответствующий диагональный элемент матрицы ставится единица, а в правую часть записывается нужное значение. Таким образом, граничное условие применяется до решения системы.
	
	\textbf{Доработанный подход к сборке} заключается в другом способе задания граничных условий.  Используется объект класса \texttt{AffineConstrains} библиотеки \texttt{deal.II}, который содержит информацию об узлах границы и используется при сборке, при этом сами граничные условия применяются только после отработки решателя. Подход состоит из следующих шагов:
	
		\begin{enumerate}[label=\arabic*)]
			\item подготовка матриц и векторов правых частей с учетом параллельной реализации. Степени свободы распределяются по процессам:
			
			{\ttfamily
			\, locally\_owned\_dofsP = dof\_handlerP.locally\_owned\_dofs();
			\vspace{-4mm}
			\begin{multline*}
			\text{DoFTools::extract\_locally\_relevant\_dofs} \\
			\text{(dof\_handlerP, locally\_relevant\_dofsP);}
			\end{multline*}
		%\vspace{-1mm}
		\begin{multline*}
			\text{system\_rP.reinit (locally\_owned\_dofsP, mpi\_communicator);	}
		\end{multline*}	
	\vspace{-10mm}
			}
			
		задаются размеры векторов правых частей и решений:
		\vspace{-4mm}
		{\ttfamily	
		\begin{multline*}	
		\text{locally\_relevant\_solutionP.reinit (locally\_owned\_dofsP,}\\
		\text{ locally\_relevant\_dofsP, mpi\_communicator);}
		\end{multline*}
		\vspace{-13mm}	
		\begin{multline*}
		\text{locally\_relevant\_old\_solutionP.reinit (locally\_owned\_dofsP,}\\ \text{locally\_relevant\_dofsP, mpi\_communicator);}
		\end{multline*}	
		
		\, system\_rP.reinit (locally\_owned\_dofsP, mpi\_communicator);		
		}
	
		и размеры глобальной матрицы через динамический шаблон:
		
		{
			\ttfamily			
			\, DynamicSparsityPattern dspP(locally\_relevant\_dofsP);
			\vspace{-4mm}
			\begin{multline*}
			\text{DoFTools::make\_sparsity\_pattern (dof\_handlerP,}\\  \text{dspP,constraintsP, false);}
			\end{multline*}
		\vspace{-13mm}	
			\begin{multline*}
			\text{SparsityTools::distribute\_sparsity\_pattern (}\\ \text{dspP, dof\_handlerP.locally\_owned\_dofs(),}\\
			\text{ mpi\_communicator, locally\_relevant\_dofsP);}
			\end{multline*}
		\vspace{-13mm}
			\begin{multline*}
			\text{system\_mP.reinit (locally\_owned\_dofsP,}\\
			\text{locally\_owned\_dofsP, dspP, mpi\_communicator);}
			\end{multline*}
		}
			\vspace{-10mm}
			\item цикл сборки локальных матриц и векторов правых частей, добавление в глобальные с учетом узлов, в которых задаются граничные условия:
			
			{\ttfamily
				
			\, cell->get\_dof\_indices (local\_dof\_indicesP);
			\vspace{-4mm}
			\begin{multline*}
			\text{constraintsP.distribute\_local\_to\_global (local\_matrixP,}\\ \text{local\_rhsP, local\_dof\_indicesP, system\_mP, system\_rP);}	
			\end{multline*}
			}
		\vspace{-10mm}
			\item обмен между вычислительными узлами:
			
			{\ttfamily
				
				\, system\_mP.compress (VectorOperation::add);
				
				\, system\_rP.compress (VectorOperation::add);
			}
			\item решение системы линейных алгебраический уравнений:		
			{\ttfamily
				\vspace{-5mm}
			\begin{multline*}
			\text{TrilinosWrappers::MPI::Vector completely\_distributed\_solution}\\
			\text{(locally\_owned\_dofsP, mpi\_communicator);}
			\end{multline*}
			\, SolverControl solver\_control (num\_of\_iter\_, accuracy\_);
			
			\, TrilinosWrappers::SolverGMRES solver (solver\_control);
			
			\, TrilinosWrappers::PreconditionAMG preconditioner;
			
			\, preconditioner.initialize(system\_mP);
\vspace{-5mm}
			\begin{multline*}
			\text{solver.solve (system\_mP, completely\_distributed\_solution,}\\ \text{system\_rP, preconditioner);}
			\end{multline*}				
		}\vspace{-10mm}
			\item применение граничных условий (присвоение заданных значений в узлах):
			
			\texttt{ constraintsP.distribute (completely\_distributed\_solution);}
		\end{enumerate}
			%Особенность функции distribute
			
			В такой конфигурации мы не меняем матрицу жесткости \texttt{system\_mP}, но вектор правой части дополнительно пересчитывается с учетом граничного условия. Если заданы однородные (нулевые) граничные условия (например, в случае давления), то можно использовать реализацию функции \texttt{distribute\_local\_to\_global}, показанную выше. Правые части систем на каждом отдельно взятом шаге по времени для двух подходов будут совпадать. В случае неоднородных граничных условий (при сборке правой части системы для поля скоростей) необходимо в качестве параметра передать функции локальную матрицу соответствующего конечного элемента, которая будет использоваться для преобразования правой части. 
					
			%Особенность. Взять фразмент кода. 
			
			Для применения данного подхода требуется дополнительно хранить соответствующие конечным элементам локальные матрицы, в связи с чем был использован контейнер \texttt{std::vector}.
					
			Способ позволяет собрать глобальную матрицу один раз вне цикла по времени, а далее в цикле менять только правые части. Это выгодно при расчете по времени, где глобальная матрица остается постоянной, а правая часть меняется на каждом шаге. Стоит отметить, что такое происходит только если сетка неподвижна. В случае, например, решения сопряженной задачи аэрогидродинамики, где сетка может деформироваться, данный подход не применим.
			 
			%Фрагмент кода. 
			%Для этого создается структура. Потребление памяти.
	
	\subsection{Граничные условия для прогноза скоростей}
	
	Граничные условия 1-го рода $\vec{u}|_\Gamma = \vec{u}_0$ должны выполняться для финального поля скоростей $\vec{u}^{n+1}$ (после шага коррекции), но не для прогнозного поля $\vec{u}^*$. Для получения необходимых граничных условий воспользуемся уравнением шага коррекции скорости $\eqref{refParametreps}$
	\begin{equation*}
		\rho \frac{\vec{u}^{n+1} - \vec{u}^*}{\Delta t} = -\nabla p \quad \Rightarrow \quad \vec{u}^* = \vec{u}^{n+1}+\frac{\Delta t}{\rho}\nabla p.
	\end{equation*}
	Таким образом может быть получено граничное условие для прогноза скорости с использованием градиента давления 
	\begin{equation*}
		\left.\vec{u}^*\right|_\Gamma =\left.\vec{u}^{n+1}\right|_\Gamma + \frac{\Delta t}{\rho}\nabla p|_\Gamma,\quad \Leftrightarrow\quad u^*_k|_\Gamma =\left.u^{n+1}_k\right|_\Gamma + \frac{\Delta t}{\rho}\left.\frac{\partial p}{\partial x_k}\right|_\Gamma,\,k=1,\,2.
	\end{equation*} 
	До нахождения прогноза скорости неизвестно поле давления на данном шаге, однако предполагается, что $\frac{\partial p}{\partial x_k}$ меняется не сильно от шага к шагу, поэтому может использоваться компонента градиента давления со старого шага по времени.
	
	\textbf{Программная реализация через \texttt{FEFieldFunction}}
	
	Градиент давления находится с помощью функции \texttt{FEFieldFunction} из библиотеки \texttt{deal.II}, которая <<натягивается>> на все поле давления, используя конечно-элементную аппроксимацию. Для составления граничного условия для прогнозной скорости $\vec{u}^*$ необходимо знание градиента давления только на границе области $\Gamma$, поэтому данный метод представляется неэффективным при использовании достаточно больших сеток.
	
	\textbf{Программная реализация через обработку заданных узлов}
	
	Для нахождения градиента давления $\nabla p$ обходятся только ребра ячеек, лежащих на границе. Значение в гауссовой точке $M$ определяется через функции формы по формуле
	\begin{equation*}
		\nabla p |_\Gamma = \sum_{i=1}^4 p_i \nabla N_i(M).
	\end{equation*}
	Далее выполняется проецирование значений с гауссовых точек на узлы (обусловлено тем что вычисление функций формы и их градиентов в \texttt{deal.II} реализовано в гауссовых точках) по формуле $\eqref{projection}$. В случае параллельных вычислений выполняется обмен данных между процессорами, поскольку в промежуточных узлах требуется информация о значениях градиента из ячеек, принадлежащих разным процессорам. Также знаменатель в аналоге выражения $\eqref{projection}$ достаточно посчитать один раз, поскольку при неизменной сетке он остается постоянным.
	
	
	\section{Сравнение эффективности реализации PFEM-2 в deal.II и OpenFOAM}
	
		%Ламинарный подход, pisoFOAM для сжимаемой несжимаемой, параметры счета
	%Там много параметров счета схемы систем и тд
	

	
	%Для более точного решения проверяем наличие частиц не во всей ячейке, а в ее частях, рисунок
	
	
	\texttt{OpenFOAM} --- один из наиболее широко применяемых пакетов для решения задач вычислительной гидроаэродинамики. Помимо этого, он может применяться при моделировании химических реакций, турбулентностей, механики деформируемого твердого тела, электромагнетизма \cite{openfoam}. Пакет не имеет графического интерфейса, распространяется с открытым исходным кодом. Распараллеливание вычислений в \texttt{OpenFOAM} реализовано методом декомпозиции расчетной области.
	
	В \texttt{OpenFOAM} все задачи изначально имеет трехмерную постановку, от которой можно далее перейти к меньшей размерности. Для решения уравнений в частных производных используется метод контрольных объемов (интегро-интерполяционный метод) в областях с заданной сеткой.
	
	Нахождение решения системы линейных алгебраических уравнений осуществляет \texttt{pisoFoam}. Этот решатель предназначен для моделирования течения несжимаемой среды (в том числе нестационарных задач) и использует алгоритм PISO (Pressure-Implicit with Splitting of Operators), описанный в \cite{piso}.
	
	Для построения систем линейных алгебраических уравнений необходимо задать схемы аппроксимации уравнений в частных производных. В \texttt{OpenFOAM} существует множество схем аппроксимаций для вычисления различных операций: градиента $\nabla$, нормальной производной на грани ячейки сетки, дивергенции $\nabla \cdot$, лапласиана $\Delta$ и т.д.
	
	\subsection{Обтекание кругового цилиндра}
	
	%тут еще про OpenFOAM pisoFoam
	% можно взять из пдф Попова в вк
	Задача об обтекании кругового цилиндра часто используется в качестве тестовой задачи, поскольку хорошо изучена и существуют известные экспериментальные оценки для различных характеристик обтекания.
	Проведем вычислительный эксперимент и сравним эффективность реализации PFEM-2 (с использованием библиотеки \texttt{deal.II}) и пакета \texttt{OpenFOAM} для разных параметров на примере задачи об обтекании кругового цилиндра, описанной выше.
	
		
	\textbf{Сравнение точности}. Будем также сравнивать эффективность реализаций PFEM-2 до и после доработки.	Для пакета \texttt{OpenFOAM} были выбраны следующие значения параметров расчета:	
	\begin{enumerate}[label=\arabic*)]
		\item временной шаг $\Delta t = 10^{-4}$;
		\item точность решателей $10^{-6}$;
		\item сетка из 19 700 прямоугольных ячеек (показана на рисунке);
	\end{enumerate}


	\begin{figure}[!h]
	\centering
	 \includegraphics[scale =0.3]{picGrid.png}
	\caption{Сетка для тестовых задач}
	\label{picGrid}
	\end{figure}

	Для реализации PFEM-2 с использованием \texttt{deal.II} были выбраны следующие значения параметров расчета:	
		\begin{enumerate}[label=\arabic*)]
		\item временной шаг $\Delta t = 0.0025$;	
		\item точность решателей $10^{-7}$;
		\item сетка совпадает с вариантом для \texttt{OpenFOAM};
		\item 	\texttt{PARTICLE\_MOVEMENT\_STEPS} $=3$ ---  количество подшагов на этапе перемещения частиц;
		\item \texttt{MAX\_PARTICLES\_PER\_CELL\_PART} $=5$ --- максимальное число частиц в части ячейки;
		\item \texttt{nOuterCorr} $=2$ --- количество подшагов на этапе МКЭ.
	\end{enumerate}

	Коэффициенты лобового сопротивления $C_x$ и подъемной силы $C_y$ зависят только от формы профиля и числа Рейнольдса и могут быть вычислены по формулам
	\begin{equation*}
		C_x = \frac{F_x}{\dfrac{\rho v^2}{2}S},\qquad C_y = \frac{F_y}{\dfrac{\rho v^2}{2}S},
	\end{equation*}	
	где $v$ --- средняя скорость потока, $\rho$ --- плотность несжимаемой жидкости, S --- площадь сечения поперек потока, $F_x$ и $F_y$ --- сила лобового сопротивления и подъемная сила соответственно. Эти силы вычисляются как компоненты вектора $\vec{F}$ по формуле
	\begin{equation*}
		\vec{F} = -\oint_\Gamma p \,\vec{n}\, dS,
	\end{equation*}
	где $\Gamma$ --- граница профиля, $\vec{n}$ --- вектор внешней нормали к этой границе.
	В данной задаче, формально, считаем что ширина профиля $d = 0.007$ м. Тогда площадь сечения поперек потока $S = D \cdot d = 0.1 \cdot 0.007 = 0.0007$ м$^2$.

	При обтекании с числом Рейнольдса $\text{Re}=100$ известны средние значения коэффициентов лобового сопротивления $\overline{C_x} = 3.23$ и подъемной силы $\overline{C_y} = 1.00$.
	Для оценки точности было проведено моделирование 10 секунд обтекания, после которых колебания коэффициентов установились и имеется возможность судить об их средних значениях.
	
		На рисунках $\ref{picCx0}$ и  $\ref{picCy0}$ представлены графики зависимости коэффициентов лобового сопротивления $C_x$ и коэффициента подъемной силы $C_y$ от времени для пакета \texttt{OpenFOAM} и реализации PFEM-2 до доработок. Из рисунков видно, что обе программы на качественном уровне дают адекватный результат, при этом у графика PFEM-2 виден недобор нужной амплитуды коэффициента $C_y$ и повышенное значение коэффициента $C_x$ (пунктирной линией изображено необходимое значение в экстремумах). Время расчета PFEM-2 оказалось больше, чем у пакета \texttt{OpenFOAM}.
		
		
			\begin{figure}[!h]
			\centering
			\begin{tabular}{cc}
				\includegraphics[scale =0.49]{Cx.pdf} & \includegraphics[scale =1]{naming0.png}\\
			\end{tabular}
			\caption{Коэффициент лобового сопротивления $C_x$}
			\label{picCx0}
		\end{figure}
		
		
		\begin{figure}[!h]
			\centering
			\begin{tabular}{cc}
				\includegraphics[scale =0.49]{Cy.pdf} & \includegraphics[scale =1]{naming0.png}\\
			\end{tabular}
			\caption{Коэффициент подъемной силы $C_y$}
			\label{picCy0}
		\end{figure}

На рисунках $\ref{picCx}$ и  $\ref{picCy}$ представлены графики зависимости коэффициентов лобового сопротивления $C_x$ и коэффициента подъемной силы $C_y$ от времени для пакета \texttt{OpenFOAM} и доработанной реализации PFEM-2. Из рисунков видно, что обе программы на качественном уровне дают адекватный результат.
Время расчета 1 секунды обтекания после доработки удалось снизить с 717 секунд до 449 секунд, что оказалось меньше чем время работы \texttt{OpenFOAM}. В таблице 1 представлены время работы (расчет 1 секунды на одном вычислительном узле), полученная ошибка для программ с различными параметрами.
		\begin{figure}[!h]
		\centering
		\begin{tabular}{cc}
			\includegraphics[scale =0.49]{Cx500.pdf} & \includegraphics[scale =1]{naming.png}\\
		\end{tabular}
		\caption{Коэффициент лобового сопротивления $C_x$}
		\label{picCx}
	\end{figure}		
	\begin{figure}[!h]
		\centering
		\begin{tabular}{cc}
			\includegraphics[scale =0.49]{Cy500.pdf} & \includegraphics[scale =1]{naming.png}\\
		\end{tabular}
		\caption{Коэффициент подъемной силы $C_y$}
		\label{picCy}
	\end{figure}	
	\medskip
	
	\begin{center}
		\begin{tabular}{|c|c|c|c|c|c|c|}\hline	
		    & \multirow{2}{*}{$\Delta t$, с}& Время расчета & \multirow{2}{*}{$C_x$} & \multirow{2}{*}{$C_y$} & Ошибка & Ошибка \\ 
		 & &   (1 c модел.), с& & & $C_x$, \%    & $C_y$, \% \\ \hline
	\texttt{OpenFOAM} & 0.0001		& 656 				  & 3.2237 & 0.9654 & 0.195 & 3.46 \\ \hline
	PFEM-2 & 0.0025			& 717   	  & 3.2513 & 0.9496 & 0.659 & 5.04\\ \hline
	PFEM-2 upd. & 0.002	& 449   			  & 3.2337 & 0.9665 & 0.115 & 3.35\\ \hline
	\end{tabular}
	\end{center}
	\begin{center}
		Таблица 1. Результаты работы программ
	\end{center}
	\medskip

	Можно сделать вывод, что реализация PFEM-2 после доработки стала работать быстрее. Реализация граничного условия для прогноза скорости через обработку заданных узлов уменьшила время работы программы на 46\%. Вынесение сборки матриц из цикла по времени сократило время работы программы на 10\% и не привело к существенному увеличению памяти. По сравнению с пакетом \texttt{OpenFOAM} программа выполняет расчет быстрее и имеет сопоставимый по точности результат. 
	
%	\textbf{Аналогичная задача} при Re $=1000$. Для этого рассмотрим неидеальную жидкость с меньшим коэффициентом динамической вязкости $\mu = 0.0001$ Па $\cdot$ с Сравним результаты работы со статьей \cite{PFEM2013}.
%	Рассмотрим аналогичную задачу об обтекании цилиндрического профиля вязкой несжимаемой жидностью с большей скоростью, такой что число Рейнольдса для задачи Re=1000. значения иззвестны из (). 	
	%Пришлось увеличить time\_step для сохранения устойчивости.	
	%Вывод больше преимуществ при большим Re
	%Еще разные сетки. Если сделать сетку менее подробной. УМеньшить с до . То PFEM-2 тоже будет выигрывать	
%	\textbf{Сравнение времени работы}. Сравнение времени работы на одном вычислительном узле.
%	
%	После доработок стало так
	%ьmax_particl_per _cel_part -- 
	%рассказать про то что временной шаг может быть больше т.к.
	%Выводы
	Таким образом, получен выигрыш по сравнению с традиционными методами, где нужны мелкие сетки и шаги по времени.
	
	\subsection{Обтекание профиля крыла}
	
	%еще про параметры запуска openFOAM решатели и тд
	
	\textbf{Сравнение точности.} На рисунке $\ref{picNACAgrid}$ показан вид сетки вблизи профиля крыла.	
	\begin{figure}[!h]
		\centering
		\includegraphics[scale =0.27]{gridNACA.png}
		\caption{Сетка для задачи обтекания профиля крыла }
		\label{picNACAgrid}
	\end{figure}
	Будем проводить расчеты на двух видах сеток: 174 000 ячеек и 562 500 ячеек. Сравнивать будем доработанную реализацию PFEM-2, пакет \texttt{OpenFOAM} и результаты работы PFEM-2, представленные в статье \cite{PFEM2013}. Сначала рассмотрим результаты на сетке из 174 000 ячеек. На рисунке $\ref{picVx}$ показано распределение компоненты $x$ поля скоростей. в момент времени $t=1с$. Можно сделать вывод, что на качественном уровне PFEM-2 дает адекватный результат.
	
		\begin{figure}[!h]
		\centering
		\includegraphics[scale =0.27]{Vx.png}
		\caption{Распределение компоненты $x$ поля скоростей}
		\label{picVx}
	\end{figure}

	
	
	На рисунках $\ref{picCxNACA}$ и  $\ref{picCyNACA}$ представлены графики зависимости коэффициентов лобового сопротивления $C_x$ и коэффициента подъемной силы $C_y$ от времени для пакета \texttt{OpenFOAM} и реализации PFEM-2. Пунктирными линиями обозначены известные значения характеристик для данной задачи. Для коэффициента подъемной силы это значения $C_{y,\min} = 0.08$ и $C_{y,\max} = 0.2$ . Для коэффициента лобового сопротивления $C_{x,\min} = 0.044$ и $C_{y,\max} = 0.052$. Значения взяты из статьи \cite{values}. Таким образом, имеем средние значения $\overline{C}_x = 0.048$, $\overline{C}_y = 0.14$.
	
		\begin{figure}[!h]
		\centering
		\begin{tabular}{cc}
			\includegraphics[scale =0.55]{CxNACA500.pdf} & \includegraphics[scale =1]{naming.png}\\
		\end{tabular}
		\caption{Коэффициент лобового сопротивления $C_x$}
		\label{picCxNACA}
	\end{figure}
	
	
	\begin{figure}[!h]
		\centering
		\begin{tabular}{cc}
			\includegraphics[scale =0.55]{CyNACA500.pdf} & \includegraphics[scale =1]{naming.png}\\
		\end{tabular}
		\caption{Коэффициент подъемной силы $C_y$}
		\label{picCyNACA}
	\end{figure}

В таблице 2 представлены время работы (расчет 1 секунды на одном вычислительном узле), полученная ошибка для программ с различными параметрами. Ошибка подсчитывалась относительно средних значений коэффициентов.
		\medskip
	
	\begin{center}
		\begin{tabular}{|c|c|c|c|c|c|c|}\hline	
			& \multirow{2}{*}{$\Delta t$, с}&Время расчета& \multirow{2}{*}{$\overline{C}_x$} & \multirow{2}{*}{$\overline{C}_y$} & Ошибка & Ошибка \\ 
			& &(0.05c модел.), с& & & $\overline{C}_x$, \%    & $\overline{C}_y$, \% \\ \hline
			OpenFOAM & 0.00005		& 445 				  & 0.0444 & 0.1269 & 7.5 & 9.4 \\ \hline
			PFEM-2 upd. & 0.001	& 575   				  & 0.0437 & 0.105 & 9.0 & 25.0\\ \hline
		\end{tabular}
	\end{center}
	\begin{center}
		Таблица 2. Результаты работы программ
	\end{center}
	\medskip

	Выводы
	
	\textbf{Время работы}
	%сравнить опенфоам с диал 2, скорость сравнить со статьей идельсона в одинарном режиме.
	
	Два варианта сетки: 
	
	
	\section{Сравнение эффективности распараллеливания}
	Будем проводить исследование на кластере кафедры <<Прикладная математика>> МГТУ им. Н.Э. Баумана. Кластер имеет 6 вычислительных узлов, каждый из них состоит из 18-ядерного процессора Intel Core i9-10980XE и 128 ГБ ОЗУ.
	
	На рисунке  $\ref{picAcc}$ показано ускорение программ для сетки из 174 000 ячеек. Можно заметить, что начиная с числа узлов $n=5$ время работы программы на \texttt{OpenFOAM} не уменьшается. Насыщение связано, прежде всего, с увеличением времени обмена данными между узлами. Для сетки с меньшим количеством ячеек при увеличении количества узлов такой эффект должен начаться раньше. Здесь влияет также способ разбиения сетки на различные процессы.
			\begin{figure}[!h]
		\centering
		\begin{tabular}{cc}
			\includegraphics[scale =0.32]{Par1.pdf} & \includegraphics[scale =0.6]{NamingParal.png}\\
		\end{tabular}
		\caption{Ускорение программ для сетки из 174 000 ячеек}
		\label{picAcc}
	\end{figure}
	 Для пакета \texttt{OpenFOAM} использовался метод \texttt{simpleCoeffs}, который разрезает область на одинаковые по размерам участки с помощью сетки. В таблице 3 показаны количество разбиений по осям $x$ и $y$ для разного числа узлов.
	
		\begin{center}
		\begin{tabular}{|c|c|c|c|c|c|c|}\hline	
		Количество ядер &18 & 36& 54 & 72 & 90 & 108  \\ \hline
		Разбиение & $6\times 3$&   $6\times 6$& $9\times 6$& $9\times 8$& $10\times 9$   &$12\times 9$\\ \hline
		\end{tabular}
	\end{center}
	\begin{center}
		Таблица 3. Разбиение сетки
	\end{center}

	Для разбиения области в реализации PFEM-2 используется библиотека \texttt{p4est}. Она создает такие подобласти, для которых хранение, отправка и использование данных максимально эффективны. На рисунке $\ref{picSubdomains}$ показано разбиение расчетной области на 18 процессов с помощью \texttt{p4est}.
	\begin{figure}[!h]
		\centering
			\includegraphics[scale =0.42]{domains.png}
		\caption{Разбиение на подобласти с помощью \texttt{p4est}}
		\label{picSubdomains}
	\end{figure}
	Рассмотрим ускорение реализаций на сетке из 562 500 ячеек, показанное на рисунке $\ref{picAcc2}$. Видно, что по сравнению с предыдущим случаем, параллелизация для PFEM-2 выполняется лучше. Для количества узлов, равного трем и четырем, наблюдается сверхлинейность: ускорение получилось больше, чем ожидается. Это, вероятнее всего, связано с более быстрым доступом к памяти по сравнению с одним узлом.
				\begin{figure}[!h]
		\centering
		\begin{tabular}{cc}
			\includegraphics[scale =0.32]{Par2.pdf} & \includegraphics[scale =0.6]{NamingParal.png}\\
		\end{tabular}
		\caption{Ускорение программ для сетки из 562 500 ячеек}
		\label{picAcc2}
	\end{figure}
	
	Время работы для реализации PFEM-2 на одном узле для сетки из 174 000 ячеек равнялось примерно 11 минут, для сетки из 562 500 ячеек --- примерно 36 минут. Можно сделать вывод что на обеих сетках эффективность распараллеливания реализации PFEM-2 оказалось выше, чем пакета \texttt{OpenFOAM}.
	%Время работы на одном узле для сетки из 174 000 ячеек равнялось примерно 648 с, для сетки из 562 500 ячеек --- примерно 2180 с


	
	\newpage
	
	\section-{ЗАКЛЮЧЕНИЕ}
	
	В результате выполнения дипломной работы была произведена оценка эффективности метода конечных элементов с частицами PFEM-2 с использованием библиотеки \texttt{deal.II} при решении некоторых задач вычислительной гидродинамики. Реализация PFEM-2 была доработана для повышения своего быстродействия. Были выполнены вычислительные эксперименты, сравнены различные характеристики расчета реализации PFEM-2 и пакета \texttt{OpenFOAM} для разных параметров на примерах обтекания кругового цилиндра и профиля крыла NACA-0012. Были рассмотрены особенности и эффективность распараллеливания реализаций на кластерной системе с распределенной памятью с использованием технологии MPI. Метод PFEM-2 показал свою эффективность и конкурентоспособность в сравнении с традиционными методами, требующими мелкие сетки и шаги по времени.

	
	\newpage
	
	\begin{thebibliography}{}
\bibitem{XXItom}
Зарубин В.С. Математическое моделирование в технике: Учеб. для вузов. М.: Изд-во МГТУ им. Н.Э. Баумана, 2003. 495 с.

\bibitem{Moiseev}
Моисеев Н.Н. Математика ставит эксперимент. М.:Наука, 1979. 222 с.

\bibitem{PFEM2013}
Idelsohn S.R., Nigro N.M., Gimenez J.M., Rossi R., Marti J.M. A
fast and accurate method to solve the incompressible Navier-Stokes
equations // Engineering Computations. 2013. V.30, No. 2. Pp.197-222. doi:
10.1108/02644401311304854

\bibitem{PFEM2014}
Idelsohn S.R., Nigro N.M., Gimenez J.M., Rossi R., Marti J.M.
Evaluating the perfomance of particle finite element method in parallel architectures //Springer Publishing. 2014. Pp.103-116. doi:10.1007/s40571-014-0009-4
%\bibitem{flow}
%Schäfer M., Turek S., Durst F., Krause E., Rannacher R. Benchmark computations of laminar flow around a cylinder // Flow Simulation with High-Performance Computers II. Notes on Numerical Fluid Mechanics (NNFM), 1996. V. 48. P. 547--566.

\bibitem{mss}
Зарубин В.С., Кувыркин Г.Н. Математические модели механики и электродинамики сплошной среды. М.: Изд-во МГТУ им. Н.Э. Баумана, 2008.
512 с.

\bibitem{dealii}
The deal.II Finite Element Library. Home page. [Электронный ресурс]. URL:
\texttt{http://www.dealii.org/} (дата обращения: 10.06.2022).

\bibitem{trilinos}
Trilinos. Home page. [Электронный ресурс]. URL:
\texttt{trilinos.github.io} (дата обращения: 10.06.2022).

\bibitem{openfoam} 
OpenFOAM. Home page. [Электронный ресурс]. URL:
\texttt{openfoam.com} (дата обращения: 10.06.2022).

\bibitem{piso}
The PISO algorithm in OpenFOAM. [Электронный ресурс]. URL:
\texttt{openfoamwiki.net/index.php/OpenFOAM\_guide/The\_PISO\_algorithm\_in\\ \_OpenFOAM} (дата обращения: 10.06.2022).


\bibitem{values}
Srinath D.N., Mittal S. Optimal aerodynamic design of airfoils in unsteady
viscous flows // Computer Methods in Applied Mechanics and Engineering,
V. 199/29–32, 2010. Pp. 1976-1991.


%Nigro N.M., Gimenez J.M., Idelsohn S.R. Recent advances in the Particle Finite Element Method towards more complex fluid flow applications // Computational Methods in Applied Sciences. 2014. V. 33. Pp. 267-318.
%\bibitem{korn}
%Г. Корн, Т. Корн. Справочник по математике (для научных работников и иненеров). М.: Наука, 1973. 832 c.
%Segerlind J. Applied Finite Element Analysis, Michigan State University, 1976, 393 p.
%


%\bibitem{loyal}
%Лойцянский Л.Г. Механика жидкости и газа: Учеб. для вузов. --- 7-е изд.
%испр. – М.: Дрофа, 2003. 840 с.
	\end{thebibliography}
	
\end{document}
